package se.lexicon.order.component.domain;

import com.so4it.common.util.object.Required;
import com.so4it.common.util.object.ValueObject;

import java.io.Serializable;

public class OrderBook extends ValueObject implements Serializable {

    String id;

    String instrument;
    Integer noOfItems;

    Money minMaxValue;
    //Money maxValue if BUY, minValue if SELL;

    Phase phase = Phase.UNKNOWN;

    Boolean sellOrder; // Sell or Buy

    private OrderBook() {
    }

    private OrderBook (Builder builder) {
        this.id = builder.id;
        this.instrument = Required.notNull(builder.instrument,"instrument");
        this.noOfItems = Required.notNull(builder.noOfItems,"noOfItems");
        this.minMaxValue = Required.notNull(builder.minMaxValue,"minMaxValue");
        this.phase = Required.notNull(builder.phase,"phase");
        this.sellOrder = Required.notNull(builder.sellOrder,"sellOrder");
    }

    @Override
    protected Object[] getIdFields() {
        return new Object[]{id, instrument, noOfItems, minMaxValue, phase, sellOrder};
    }

    //@Allowed(minMaxValue = "Auto generated by GS",types = {Allowed.Type.NULLABLE})
    public String getId() {
        return id;
    }

    public String getInstrument() {
        return instrument;
    }

    public Integer getNoOfItems() {
    return noOfItems;
}

    public Money getMinMaxValue() {
        return minMaxValue;
    }

    public Phase getPhase() {
        return phase;
    }

    public Boolean getSellOrder() {
        return sellOrder;
    }

    public static Builder builder(){
        return new Builder();
    }

    public static class Builder implements com.so4it.common.builder.Builder<OrderBook>{

        String id;

        String instrument;
        Integer noOfItems;

        Money minMaxValue;
        //Money max or min Value;

        Phase phase;

        Boolean sellOrder;

        public Builder withId(String id){
            this.id = id;
            return this;
        }

        public Builder withInstrument(String instrument){
            this.instrument = instrument;
            return this;
        }

        public Builder withNoOfItems(Integer noOfItems){
            this.noOfItems = noOfItems;
            return this;
        }

        public Builder withMinMaxValue(Money value){
            this.minMaxValue = value;
            return this;
        }

        public Builder withPhase(Phase phase){
            this.phase = phase;
            return this;
        }

        public Builder withSellOrder(Boolean sellOrder){
            this.sellOrder = sellOrder;
            return this;
        }

        @Override
        public OrderBook build() {
            return new OrderBook(this);
        }
    }
}
